---

- name: Create a directory for certificates backup if it does not exists
  tags: cert
  delegate_to: localhost
  file:
    path: '{{ playbook_dir }}/../../backup/{{ network.domain }}/certificates/'
    state: directory

# The "--ignore-existing" option skip the files already existing,
# especially the symbolic links in the live folder
# The '--update' option make sure to not overwrite new certificates.
- name: If the certificates have been generated before, copy them on the remote server
  tags: cert,sync
  synchronize:
    src: '{{ playbook_dir }}/../../backup/{{ network.domain }}/certificates/'
    dest: /etc
    owner: no
    group: no
    perms: yes
    rsync_opts:
      - '--no-motd'
      - '--exclude=readme.md'
      - '--ignore-existing'
      - '--update'

- name: Use the default domain name for FQDN
  when: certificate.type == '@'
  tags: cert, facts
  set_fact:
    certificate_fqdn: "{{ network.domain }}"
    site_root: "/var/www/default"
    redirect_to_https: "{{ redirect | default(false) }}"

- name: Create the certificate fqdn with the subdomain
  when: certificate.type != '@'
  tags: cert, facts
  set_fact:
    certificate_fqdn: "{{ certificate.type }}.{{ network.domain }}"
    site_root: "/var/www/{{ certificate.type }}"
    redirect_to_https: "{{ redirect | default(false) }}"

- name: Check if the certificate has been copied from a previous backup
  tags: cert
  register: cert_stat
  stat:
    path: "/etc/letsencrypt/live/{{ certificate_fqdn }}/cert.pem"

- name: Create a directory for the site if it does not exists
  tags: cert
  file:
    path: "{{ site_root }}/.well-known/acme-challenge/"
    state: directory

- name: Create a simple nginx template site (if not exists)
  template:
    src: nginx-cert.conf
    dest: "/etc/nginx/sites-available/{{ certificate_fqdn }}-cert.conf"

- name: Make sure the site is enabled
  file:
    src: "/etc/nginx/sites-available/{{ certificate_fqdn }}-cert.conf"
    dest: "/etc/nginx/sites-enabled/{{ certificate_fqdn }}-cert.conf"
    state: link

# AppArmor configuration ======================================================

- name: Install web site AppArmor profile
  when: security.app_armor
  tags: security, apparmor
  template:
    src: apparmor-cert.conf
    dest: "/etc/apparmor.d/local/nginx-{{ certificate_fqdn }}"

- name: Add website AppArmor specific configuration
  when: security.app_armor
  register: aa_config
  tags: security, apparmor
  lineinfile:
    path: /etc/apparmor.d/usr.sbin.nginx
    line: '  #include <local/nginx-{{ certificate_fqdn }}>'
    insertbefore: '# End of local includes for homebox'

- name: Activate AppArmor profiles
  when: security.app_armor and aa_config.changed
  tags: security, apparmor
  command: 'aa-enforce usr.sbin.nginx'

- name: Restart the nginx server to load the new configuration
  tags: cert
  service:
    name: nginx
    state: restarted

# End of appArmor configuration ===============================================

- name: Create the folder for renewal hooks
  file:
    path: /etc/letsencrypt/renewal-hooks/deploy
    state: directory

- name: Install the certificate renewal hook
  tags: script
  template:
    src: renewal-hook.sh
    dest: /etc/letsencrypt/renewal-hooks/deploy/renewal-hook.sh
    mode: 0755

- name: Restart the nginx server
  tags: cert
  service:
    name: nginx
    state: restarted

- name: Open the port 80 if necessary
  tags: security
  register: ufw_http
  ufw:
    proto: tcp
    rule: limit
    src: any
    port: 80
    comment: Allow LetsEncrypt temporarily

# The certbot package need to be installed
- name: Create the certificate
  tags: cert
  command: >-
    /usr/bin/certbot certonly
    --non-interactive
    --webroot
    --webroot-path "{{ site_root }}"
    --domain "{{ certificate_fqdn }}"
    --email "admin@{{ network.domain }}"
    --agree-tos
  args:
    creates: "/etc/letsencrypt/live/{{ certificate_fqdn }}/cert.pem"

- name: Remove the firewall rule if it has been added
  tags: security
  when: ufw_http.changed
  ufw:
    proto: tcp
    rule: limit
    src: any
    port: 80
    delete: yes
    comment: Allow LetsEncrypt temporarily

- name: Remove the templated files from any old version
  tags: upgrade
  file:
    path: '{{ old_file }}'
    state: absent
  with_items:
    - /etc/cron.d/certificates-renew.cron
    - /usr/local/sbin/certificates-renew.sh
  loop_control:
    loop_var: old_file

- name: Copy the original certificate renewal script from certbot package
  template:
    src: cron-certbot
    dest: /etc/cron.d/certbot
    force: no

- name: Use webroot to upgrade the certificates
  tags: upgrade
  register: renewal_config
  replace:
    path: '/etc/letsencrypt/renewal/{{ certificate_fqdn }}.conf'
    regexp: authenticator = standalone
    replace: authenticator = webroot

# TODO: Remove this part, the certificates are now deployed "standalone"
- name: Add missing lines when changed from standalone to webroot
  tags: upgrade
  when: renewal_config.changed
  lineinfile:
    path: '/etc/letsencrypt/renewal/{{ certificate_fqdn }}.conf'
    line: '{{ line }}'
  with_items:
    - 'webroot_path = {{ site_root }},'
    - '[[webroot_map]]'
    - '{{ certificate_fqdn }} = {{ site_root }}'
  loop_control:
    loop_var: line

# FIXME: Call the custom script for this domain instead
# - name: Run the certificate renewal script if needed
#   shell: >-
#     certbot certonly -d {{ certificate_fqdn }}

# In this direction, we should overwrite the symbolic links,
# in case the certificates have been renewed
- name: Backup the certificates on your local machine
  tags: cert,sync
  synchronize:
    mode: pull
    src: /etc/letsencrypt
    dest: '{{ playbook_dir }}/../../backup/{{ network.domain }}/certificates/'
    perms: yes
    rsync_opts:
      - '--no-motd'
      - '--exclude=readme.md'
      - '--update'
